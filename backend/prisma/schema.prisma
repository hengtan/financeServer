// Enterprise-grade Prisma schema with ACID compliance and optimizations
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User management with security features
model User {
  id                String    @id @default(cuid())
  name              String
  email             String    @unique
  passwordHash      String
  role              UserRole  @default(USER)
  status            UserStatus @default(PENDING_VERIFICATION)

  // Profile information
  avatarUrl         String?
  phoneNumber       String?

  // Security features
  twoFactorEnabled  Boolean   @default(false)
  twoFactorSecret   String?
  lastLoginAt       DateTime?
  emailVerifiedAt   DateTime?

  // Audit fields
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  metadata          Json?

  // Relations
  accounts          Account[]
  transactions      Transaction[]
  categories        Category[]        // ðŸ”„ Tabela legacy (serÃ¡ removida)
  userCategories    UserCategory[]    // ðŸš€ Nova arquitetura hÃ­brida
  goals             Goal[]
  budgets           Budget[]
  reports           Report[]
  alerts            Alert[]

  // Indexes for performance
  @@index([email])
  @@index([status])
  @@index([role])
  @@index([createdAt])
  @@map("users")
}

enum UserRole {
  USER
  ADMIN
  PREMIUM
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

// Financial accounts with precise decimal handling
model Account {
  id              String        @id @default(cuid())
  userId          String
  name            String
  type            AccountType
  balance         Decimal       @db.Decimal(15, 2) // High precision for financial data
  currency        String        @default("USD")

  // Bank information
  bankName        String?
  accountNumber   String?
  routingNumber   String?

  // Account settings
  status          AccountStatus @default(ACTIVE)
  isDefault       Boolean       @default(false)
  creditLimit     Decimal?      @db.Decimal(15, 2)
  interestRate    Decimal?      @db.Decimal(5, 4)
  description     String?
  color           String?

  // Audit fields
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  metadata        Json?

  // Relations
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions    Transaction[] @relation("AccountTransactions")
  transfersTo     Transaction[] @relation("TransferTo")

  // Indexes for performance and constraints
  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([currency])
  // No unique constraint - users can have multiple accounts with same name or type
  @@map("accounts")
}

enum AccountType {
  CHECKING
  SAVINGS
  INVESTMENT
  CREDIT_CARD
  LOAN
  OTHER
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  CLOSED
  FROZEN
}

// Transaction categories with hierarchical support
model Category {
  id                String         @id @default(cuid())
  userId            String
  name              String
  description       String?
  type              CategoryType
  color             String?
  icon              String?
  parentCategoryId  String?
  status            CategoryStatus @default(ACTIVE)
  isDefault         Boolean        @default(false)
  isSystem          Boolean        @default(false)
  tags              String[]

  // Audit fields
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  metadata          Json?

  // Relations
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentCategory    Category?      @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  subcategories     Category[]     @relation("CategoryHierarchy")
  transactions      Transaction[]
  budgets           Budget[]

  // Indexes for performance
  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([parentCategoryId])
  @@unique([userId, name]) // Prevent duplicate category names per user
  @@map("categories")
}

enum CategoryType {
  INCOME
  EXPENSE
  TRANSFER
}

enum CategoryStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

// ============================================================
// ðŸš€ NEW CATEGORY ARCHITECTURE - HYBRID SYSTEM
// ============================================================

// Templates de categorias (sistema) - Categorias padrÃ£o globais
model CategoryTemplate {
  id          String @id @default(cuid())
  name        String
  type        CategoryType
  description String?
  color       String?
  icon        String?

  // ConfiguraÃ§Ãµes do template
  isDefault   Boolean @default(false) // Aparece por padrÃ£o para novos usuÃ¡rios
  isSystem    Boolean @default(true)  // Criada pelo sistema
  sortOrder   Int?                    // Ordem de exibiÃ§Ã£o

  // Metadados e localizaÃ§Ã£o
  tags        String[]
  metadata    Json?

  // Audit fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userCategories UserCategory[]

  // Indexes
  @@index([type])
  @@index([isDefault])
  @@index([isSystem])
  @@index([sortOrder])
  @@unique([name, type]) // Nome Ãºnico por tipo
  @@map("category_templates")
}

// Categorias especÃ­ficas do usuÃ¡rio (baseadas em templates OU criadas do zero)
model UserCategory {
  id                 String @id @default(cuid())
  userId             String

  // ReferÃªncia ao template (NULL = categoria prÃ³pria do usuÃ¡rio)
  categoryTemplateId String?

  // Dados da categoria (sobrescreve template se baseada em um)
  name               String
  description        String?
  type               CategoryType
  color              String?
  icon               String?

  // Hierarquia (mantÃ©m flexibilidade)
  parentCategoryId   String?

  // Estado e configuraÃ§Ãµes
  status             CategoryStatus @default(ACTIVE)
  isActive           Boolean @default(true)
  isCustom           Boolean @default(false) // true = criada pelo usuÃ¡rio
  isDefault          Boolean @default(false) // padrÃ£o do usuÃ¡rio
  sortOrder          Int?

  // Metadados
  tags               String[]
  metadata           Json?

  // Audit fields
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryTemplate   CategoryTemplate? @relation(fields: [categoryTemplateId], references: [id])
  parentCategory     UserCategory? @relation("UserCategoryHierarchy", fields: [parentCategoryId], references: [id])
  subcategories      UserCategory[] @relation("UserCategoryHierarchy")

  // ðŸ”„ Relations que serÃ£o migradas da tabela Category
  transactions       Transaction[] @relation("UserCategoryTransactions")
  budgets           Budget[] @relation("UserCategoryBudgets")

  // Indexes otimizados
  @@index([userId])
  @@index([userId, type])
  @@index([userId, status])
  @@index([userId, isActive])
  @@index([categoryTemplateId])
  @@index([parentCategoryId])
  @@index([type, isActive])
  @@unique([userId, name]) // Nome Ãºnico por usuÃ¡rio
  @@map("user_categories")
}

// Financial transactions with ACID compliance
model Transaction {
  id              String            @id @default(cuid())
  userId          String
  description     String
  amount          Decimal           @db.Decimal(15, 2) // High precision financial amount
  type            TransactionType
  categoryId      String?          // ðŸ”„ Legacy field (serÃ¡ removido, agora opcional)
  userCategoryId  String?          // ðŸš€ Nova arquitetura hÃ­brida
  accountId       String
  toAccountId     String?           // For transfers
  status          TransactionStatus @default(PENDING)
  date            DateTime          @default(now())
  reference       String?

  // Audit fields - critical for financial compliance
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  metadata        Json?

  // Relations
  user            User              @relation(fields: [userId], references: [id], onDelete: Restrict)
  category        Category?         @relation(fields: [categoryId], references: [id], onDelete: Restrict)    // ðŸ”„ Legacy (agora opcional)
  userCategory    UserCategory?     @relation("UserCategoryTransactions", fields: [userCategoryId], references: [id])  // ðŸš€ Nova
  account         Account           @relation("AccountTransactions", fields: [accountId], references: [id], onDelete: Restrict)
  toAccount       Account?          @relation("TransferTo", fields: [toAccountId], references: [id])

  // Indexes for high-performance queries
  @@index([userId])
  @@index([accountId])
  @@index([categoryId])        // ðŸ”„ Legacy index
  @@index([userCategoryId])    // ðŸš€ Nova index
  @@index([type])
  @@index([status])
  @@index([date])
  @@index([userId, date]) // Composite index for user transaction history
  @@index([accountId, date]) // Composite index for account transaction history
  @@index([userCategoryId, date]) // Composite index for category transaction history
  @@map("transactions")
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
  FAILED
}

// Financial goals with progress tracking
model Goal {
  id              String      @id @default(cuid())
  userId          String
  name            String
  description     String?
  targetAmount    Decimal     @db.Decimal(15, 2)
  currentAmount   Decimal     @default(0) @db.Decimal(15, 2)
  currency        String      @default("USD")
  targetDate      DateTime?
  status          GoalStatus  @default(ACTIVE)
  color           String?

  // Audit fields
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  metadata        Json?

  // Relations
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([status])
  @@index([targetDate])
  @@map("goals")
}

enum GoalStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}

// Budget management
model Budget {
  id              String       @id @default(cuid())
  userId          String
  categoryId      String       // ðŸ”„ Legacy field (serÃ¡ removido)
  userCategoryId  String?      // ðŸš€ Nova arquitetura hÃ­brida
  name            String
  amount          Decimal      @db.Decimal(15, 2)
  spent           Decimal      @default(0) @db.Decimal(15, 2)
  currency        String       @default("USD")
  period          BudgetPeriod @default(MONTHLY)
  startDate       DateTime
  endDate         DateTime
  status          BudgetStatus @default(ACTIVE)

  // Audit fields
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  metadata        Json?

  // Relations
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  category        Category     @relation(fields: [categoryId], references: [id], onDelete: Restrict)    // ðŸ”„ Legacy
  userCategory    UserCategory? @relation("UserCategoryBudgets", fields: [userCategoryId], references: [id])  // ðŸš€ Nova

  // Indexes
  @@index([userId])
  @@index([categoryId])        // ðŸ”„ Legacy index
  @@index([userCategoryId])    // ðŸš€ Nova index
  @@index([status])
  @@index([startDate, endDate])
  @@map("budgets")
}

enum BudgetPeriod {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum BudgetStatus {
  ACTIVE
  COMPLETED
  EXCEEDED
  CANCELLED
}

// Audit log for compliance and security
model AuditLog {
  id              String      @id @default(cuid())
  userId          String?
  action          String
  entityType      String
  entityId        String
  oldValues       Json?
  newValues       Json?
  ipAddress       String?
  userAgent       String?
  timestamp       DateTime    @default(now())
  metadata        Json?

  // Indexes for audit queries
  @@index([userId])
  @@index([entityType])
  @@index([entityId])
  @@index([action])
  @@index([timestamp])
  @@map("audit_logs")
}

// Session management for security
model Session {
  id              String      @id @default(cuid())
  userId          String
  token           String      @unique
  refreshToken    String      @unique
  expiresAt       DateTime
  ipAddress       String?
  userAgent       String?
  isActive        Boolean     @default(true)

  // Audit fields
  createdAt       DateTime    @default(now())
  lastAccessedAt  DateTime    @default(now())

  // Indexes
  @@index([userId])
  @@index([token])
  @@index([refreshToken])
  @@index([expiresAt])
  @@map("sessions")
}

// Reports management
model Report {
  id              String        @id @default(cuid())
  userId          String
  name            String
  description     String?
  type            ReportType
  status          ReportStatus  @default(PENDING)
  format          ReportFormat
  config          Json // ReportConfig as JSON
  data            Json? // ReportData as JSON
  fileUrl         String?
  filePath        String?
  error           String?
  generatedAt     DateTime?
  expiresAt       DateTime?
  metadata        Json?

  // Audit fields
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([format])
  @@index([generatedAt])
  @@index([expiresAt])
  @@index([createdAt])
  @@map("reports")
}

enum ReportType {
  FINANCIAL_SUMMARY
  CATEGORY_ANALYSIS
  MONTHLY_TREND
  CASH_FLOW_PROJECTION
  BUDGET_VARIANCE
  SPENDING_PATTERNS
  CUSTOM
}

enum ReportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ReportFormat {
  JSON
  PDF
  EXCEL
  CSV
}

// Alerts management
model Alert {
  id              String        @id @default(cuid())
  userId          String
  type            AlertType
  severity        AlertSeverity
  status          AlertStatus   @default(ACTIVE)
  title           String
  message         String
  description     String?
  data            Json // AlertData as JSON
  rule            Json? // AlertRule as JSON
  actionUrl       String?
  actionText      String?
  triggeredAt     DateTime      @default(now())
  readAt          DateTime?
  dismissedAt     DateTime?
  expiresAt       DateTime?
  channels        Json // AlertChannel[] as JSON
  metadata        Json?

  // Audit fields
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([type])
  @@index([severity])
  @@index([status])
  @@index([triggeredAt])
  @@index([readAt])
  @@index([dismissedAt])
  @@index([expiresAt])
  @@index([createdAt])
  @@index([userId, status]) // Composite index for user alerts by status
  @@map("alerts")
}

enum AlertType {
  BUDGET_EXCEEDED
  HIGH_SPENDING
  LOW_BALANCE
  UNUSUAL_TRANSACTION
  RECURRING_PAYMENT_DUE
  GOAL_MILESTONE
  CASH_FLOW_WARNING
  INCOME_RECEIVED
  EXPENSE_ANOMALY
  SAVINGS_OPPORTUNITY
  CUSTOM
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AlertStatus {
  ACTIVE
  READ
  DISMISSED
  EXPIRED
}

enum AlertChannel {
  IN_APP
  EMAIL
  SMS
  PUSH
}