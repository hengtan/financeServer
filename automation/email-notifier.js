/**
 * Sistema de Notifica√ß√£o por Email (GRATUITO)
 *
 * Usa Gmail gratuitamente com senha de aplicativo
 */

const nodemailer = require('nodemailer');
const fs = require('fs');
const path = require('path');
const logger = require('./logger');

const CONFIG_FILE = path.join(__dirname, 'config.json');

class EmailNotifier {
  constructor() {
    this.config = null;
    this.transporter = null;
  }

  /**
   * Carrega configura√ß√£o
   */
  loadConfig() {
    try {
      this.config = JSON.parse(fs.readFileSync(CONFIG_FILE, 'utf-8'));
      return true;
    } catch (err) {
      logger.error('Erro ao carregar config.json para email', { error: err.message });
      return false;
    }
  }

  /**
   * Inicializa transporter
   */
  initialize() {
    if (!this.loadConfig()) {
      return false;
    }

    if (!this.config.email || !this.config.email.enabled) {
      logger.info('Notifica√ß√µes por email desabilitadas');
      return false;
    }

    const emailConfig = this.config.email;

    // Validar configura√ß√µes
    if (!emailConfig.from || !emailConfig.password || !emailConfig.to) {
      logger.error('Configura√ß√µes de email incompletas em config.json');
      return false;
    }

    try {
      // Criar transporter Gmail
      this.transporter = nodemailer.createTransport({
        service: 'gmail',
        auth: {
          user: emailConfig.from,
          pass: emailConfig.password // Senha de aplicativo do Gmail
        }
      });

      logger.info('Sistema de email inicializado', { from: emailConfig.from, to: emailConfig.to });
      return true;

    } catch (err) {
      logger.error('Erro ao inicializar email', { error: err.message });
      return false;
    }
  }

  /**
   * Envia notifica√ß√£o de sucesso
   */
  async sendSuccess(type, data = {}) {
    if (!this.transporter) {
      logger.warn('Email n√£o configurado, pulando notifica√ß√£o');
      return false;
    }

    const emailConfig = this.config.email;
    const date = new Date().toLocaleDateString('pt-BR');
    const time = new Date().toLocaleTimeString('pt-BR');

    let subject = '';
    let body = '';

    if (type === 'entry') {
      subject = `Ponto batido para o dia: ${date}`;
      body = `
<h2>‚úÖ Ponto Batido - Manh√£</h2>

<p><strong>Data:</strong> ${date}</p>
<p><strong>Hora:</strong> ${time}</p>

<p><strong>‚úÖ Entrada registrada com sucesso!</strong></p>

<h3>üìä Hor√°rios programados para hoje:</h3>
<ul>
  <li><strong>Entrada:</strong> ${data.times?.entry || 'N/A'}</li>
  <li><strong>Sa√≠da Almo√ßo:</strong> ${data.times?.lunchStart || 'N/A'}</li>
  <li><strong>Volta Almo√ßo:</strong> ${data.times?.lunchEnd || 'N/A'}</li>
  <li><strong>Sa√≠da Final:</strong> ${data.times?.exit || 'N/A'}</li>
</ul>

<hr>
<p style="color: gray; font-size: 12px;">
Sistema de Automa√ß√£o de Ponto<br>
Executado automaticamente √†s ${time}
</p>
      `.trim();

    } else if (type === 'exit') {
      subject = `Ponto batido para o dia: ${date}`;
      body = `
<h2>‚úÖ Ponto Batido - Tarde (Completo)</h2>

<p><strong>Data:</strong> ${date}</p>
<p><strong>Hora:</strong> ${time}</p>

<h3>üìä Todas as batidas do dia:</h3>
<ul>
  <li><strong>Entrada:</strong> ${data.times?.entry || 'N/A'}</li>
  <li><strong>Sa√≠da Almo√ßo:</strong> ${data.times?.lunchStart || 'N/A'}</li>
  <li><strong>Entrada Almo√ßo:</strong> ${data.times?.lunchEnd || 'N/A'}</li>
  <li><strong>Sa√≠da Final:</strong> ${data.times?.exit || 'N/A'}</li>
</ul>

<p><strong>‚úÖ Todos os hor√°rios registrados com sucesso!</strong></p>

<hr>
<p style="color: gray; font-size: 12px;">
Sistema de Automa√ß√£o de Ponto<br>
Executado automaticamente √†s ${time}
</p>
      `.trim();

    } else {
      return false;
    }

    try {
      const mailOptions = {
        from: `"Sistema de Ponto" <${emailConfig.from}>`,
        to: emailConfig.to,
        subject: subject,
        html: body
      };

      const info = await this.transporter.sendMail(mailOptions);
      logger.success('Email enviado com sucesso', { messageId: info.messageId });
      return true;

    } catch (err) {
      logger.error('Erro ao enviar email', { error: err.message, stack: err.stack });
      return false;
    }
  }

  /**
   * Envia notifica√ß√£o de erro
   */
  async sendError(type, error) {
    if (!this.transporter) {
      return false;
    }

    const emailConfig = this.config.email;
    const date = new Date().toLocaleDateString('pt-BR');
    const time = new Date().toLocaleTimeString('pt-BR');

    const subject = `‚ùå ERRO no Sistema de Ponto - ${date}`;
    const body = `
<h2 style="color: red;">‚ùå ERRO no Sistema de Ponto</h2>

<p><strong>Data:</strong> ${date}</p>
<p><strong>Hora:</strong> ${time}</p>
<p><strong>Tipo:</strong> ${type}</p>

<h3>‚ö†Ô∏è Detalhes do Erro:</h3>
<pre style="background: #f5f5f5; padding: 10px; border-radius: 5px;">
${error}
</pre>

<p style="color: red;"><strong>‚ö†Ô∏è A√ß√£o necess√°ria: Verifique os logs e execute manualmente!</strong></p>

<hr>
<p style="color: gray; font-size: 12px;">
Sistema de Automa√ß√£o de Ponto<br>
Erro detectado √†s ${time}
</p>
    `.trim();

    try {
      const mailOptions = {
        from: `"Sistema de Ponto" <${emailConfig.from}>`,
        to: emailConfig.to,
        subject: subject,
        html: body
      };

      const info = await this.transporter.sendMail(mailOptions);
      logger.success('Email de erro enviado', { messageId: info.messageId });
      return true;

    } catch (err) {
      logger.error('Erro ao enviar email de erro', { error: err.message });
      return false;
    }
  }

  /**
   * Envia notifica√ß√£o de teste
   */
  async sendTest() {
    if (!this.transporter) {
      console.log('‚ùå Email n√£o configurado');
      return false;
    }

    const emailConfig = this.config.email;
    const date = new Date().toLocaleDateString('pt-BR');
    const time = new Date().toLocaleTimeString('pt-BR');

    const subject = `üß™ Teste - Sistema de Ponto - ${date}`;
    const body = `
<h2>üß™ Email de Teste</h2>

<p>Se voc√™ recebeu este email, o sistema de notifica√ß√µes est√° funcionando corretamente!</p>

<p><strong>Data:</strong> ${date}</p>
<p><strong>Hora:</strong> ${time}</p>

<h3>‚úÖ Configura√ß√µes:</h3>
<ul>
  <li><strong>De:</strong> ${emailConfig.from}</li>
  <li><strong>Para:</strong> ${emailConfig.to}</li>
</ul>

<p><strong>‚úÖ Sistema pronto para enviar notifica√ß√µes!</strong></p>

<hr>
<p style="color: gray; font-size: 12px;">
Sistema de Automa√ß√£o de Ponto<br>
Email de teste enviado √†s ${time}
</p>
    `.trim();

    try {
      const mailOptions = {
        from: `"Sistema de Ponto" <${emailConfig.from}>`,
        to: emailConfig.to,
        subject: subject,
        html: body
      };

      console.log('\nüìß Enviando email de teste...');
      console.log(`   De: ${emailConfig.from}`);
      console.log(`   Para: ${emailConfig.to}\n`);

      const info = await this.transporter.sendMail(mailOptions);

      console.log('‚úÖ Email enviado com sucesso!');
      console.log(`   Message ID: ${info.messageId}\n`);
      console.log('üîç Verifique sua caixa de entrada!\n');

      return true;

    } catch (err) {
      console.error('‚ùå Erro ao enviar email:', err.message);
      console.error('\nüí° Dicas:');
      console.error('   - Verifique se a senha de aplicativo est√° correta');
      console.error('   - Verifique se o email est√° correto');
      console.error('   - Verifique sua conex√£o com a internet\n');
      return false;
    }
  }
}

// Se executado diretamente, envia email de teste
if (require.main === module) {
  const notifier = new EmailNotifier();
  if (notifier.initialize()) {
    notifier.sendTest().then(() => {
      console.log('Teste conclu√≠do!\n');
    });
  } else {
    console.log('\n‚ùå Falha ao inicializar sistema de email');
    console.log('   Verifique as configura√ß√µes em config.json\n');
  }
}

module.exports = EmailNotifier;
