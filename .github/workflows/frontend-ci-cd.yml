name: Frontend CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci-cd.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci-cd.yml'

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: hengtan/financeserver-frontend

jobs:
  # ================================================================
  # CONTINUOUS INTEGRATION
  # ================================================================

  lint-and-format:
    name: 🔍 Code Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📥 Install Dependencies
        working-directory: frontend
        run: npm ci

      - name: 🔍 Run ESLint
        working-directory: frontend
        run: npm run lint

      - name: 💅 Check Prettier Formatting
        working-directory: frontend
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,css,scss,json,md}"

      - name: 📊 Upload Lint Results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-lint-results
          path: frontend/eslint-report.json

  type-check:
    name: 📝 TypeScript Check
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📥 Install Dependencies
        working-directory: frontend
        run: npm ci

      - name: 📝 Check TypeScript Types
        working-directory: frontend
        run: npx tsc --noEmit

  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: ['18.x', '20.x']

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📥 Install Dependencies
        working-directory: frontend
        run: npm ci

      - name: 🧪 Run Unit Tests
        working-directory: frontend
        run: npm run test -- --coverage --watchAll=false --passWithNoTests
        env:
          CI: true

      - name: 📊 Upload Coverage to Codecov
        if: matrix.node-version == '18.x'
        uses: codecov/codecov-action@v3
        with:
          file: frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: 📋 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-test-results-${{ matrix.node-version }}
          path: |
            frontend/coverage/
            frontend/junit.xml

  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📥 Install Dependencies
        working-directory: frontend
        run: npm ci

      - name: 📥 Install Playwright
        working-directory: frontend
        run: npx playwright install --with-deps

      - name: 🏗️ Build Application
        working-directory: frontend
        run: npm run build
        env:
          VITE_API_URL: http://localhost:3001

      - name: 🎭 Run E2E Tests
        working-directory: frontend
        run: npx playwright test
        env:
          CI: true

      - name: 📊 Upload E2E Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results
          path: |
            frontend/playwright-report/
            frontend/test-results/

  accessibility-tests:
    name: ♿ Accessibility Tests
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📥 Install Dependencies
        working-directory: frontend
        run: npm ci

      - name: 🏗️ Build Application
        working-directory: frontend
        run: npm run build

      - name: ♿ Run Accessibility Tests
        working-directory: frontend
        run: |
          npm install -g @axe-core/cli
          npx serve -s dist -p 3000 &
          sleep 5
          axe http://localhost:3000 --exit

  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 🔒 Run Security Audit
        working-directory: frontend
        run: npm audit --audit-level=moderate

      - name: 🔍 Check for Vulnerabilities
        working-directory: frontend
        run: |
          npx audit-ci --moderate
        continue-on-error: true

  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check, unit-tests]

    strategy:
      matrix:
        environment: [staging, production]

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📥 Install Dependencies
        working-directory: frontend
        run: npm ci

      - name: 🏗️ Build for ${{ matrix.environment }}
        working-directory: frontend
        run: npm run build
        env:
          NODE_ENV: production
          VITE_API_URL: ${{ matrix.environment == 'staging' && secrets.STAGING_API_URL || secrets.PRODUCTION_API_URL }}
          VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN_FRONTEND }}
          VITE_ANALYTICS_ID: ${{ secrets.ANALYTICS_ID }}

      - name: 📊 Analyze Bundle Size
        working-directory: frontend
        run: |
          npx vite-bundle-analyzer dist --open false --static
        continue-on-error: true

      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.environment }}
          path: |
            frontend/dist/
            frontend/package.json
            frontend/package-lock.json
          retention-days: 7

  lighthouse:
    name: 🔍 Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-staging
          path: frontend/

      - name: 🔍 Run Lighthouse CI
        working-directory: frontend
        run: |
          npm install -g @lhci/cli@0.12.x
          npx serve -s dist -p 3000 &
          sleep 5
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: 📊 Upload Lighthouse Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci/

  # ================================================================
  # CONTINUOUS DEPLOYMENT
  # ================================================================

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, e2e-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-staging
          path: frontend/

      - name: 🌐 Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: hengtan
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_STAGING }}
          working-directory: frontend
          scope: hengtan
        env:
          VERCEL_ENV: preview

      - name: 🧪 Run Smoke Tests
        run: |
          curl -f ${{ secrets.STAGING_FRONTEND_URL }} || exit 1
          echo "✅ Staging deployment successful!"

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, e2e-tests, lighthouse]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-production
          path: frontend/

      - name: 🌐 Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: hengtan
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_PRODUCTION }}
          working-directory: frontend
          scope: hengtan
        env:
          VERCEL_ENV: production

      - name: 🧪 Run Production Smoke Tests
        run: |
          curl -f ${{ secrets.PRODUCTION_FRONTEND_URL }} || exit 1
          curl -f ${{ secrets.PRODUCTION_FRONTEND_URL }}/health || exit 1
          echo "✅ Production deployment successful!"

      - name: 📢 Notify Deployment Success
        if: success()
        run: |
          echo "🎉 Frontend successfully deployed to production!"
          echo "📊 Version: ${{ github.sha }}"
          echo "🔗 URL: ${{ secrets.PRODUCTION_FRONTEND_URL }}"

      - name: 📢 Notify Deployment Failure
        if: failure()
        run: |
          echo "❌ Production deployment failed!"
          echo "🔍 Check logs for details"

  # ================================================================
  # POST-DEPLOYMENT MONITORING
  # ================================================================

  performance-monitoring:
    name: ⚡ Performance Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ⚡ Monitor Core Web Vitals
        run: |
          npx web-vitals-measure ${{ secrets.STAGING_FRONTEND_URL }}

      - name: 📊 Bundle Size Check
        run: |
          echo "📦 Checking bundle size..."
          # Add bundle size monitoring logic here

  visual-regression:
    name: 👁️ Visual Regression Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 👁️ Run Visual Tests
        uses: chromaui/action@v1
        with:
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          workingDir: frontend

  seo-audit:
    name: 🔍 SEO Audit
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Run SEO Audit
        run: |
          npx lighthouse ${{ secrets.STAGING_FRONTEND_URL }} --only-categories=seo --output=json --output-path=./seo-results.json

      - name: 📊 Upload SEO Results
        uses: actions/upload-artifact@v4
        with:
          name: seo-results
          path: seo-results.json

  # ================================================================
  # CLEANUP AND NOTIFICATIONS
  # ================================================================

  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()

    steps:
      - name: 🧹 Clean up old deployments
        uses: actions/github-script@v7
        with:
          script: |
            // Clean up old Vercel deployments
            console.log('Cleaning up old artifacts and deployments...')

      - name: 📊 Generate Deployment Report
        run: |
          echo "## 📊 Deployment Summary" > deployment-report.md
          echo "- **Branch**: ${{ github.ref_name }}" >> deployment-report.md
          echo "- **Commit**: ${{ github.sha }}" >> deployment-report.md
          echo "- **Triggered by**: ${{ github.actor }}" >> deployment-report.md
          echo "- **Environment**: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}" >> deployment-report.md

      - name: 📤 Upload Deployment Report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: deployment-report.md

  notify:
    name: 📢 Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()

    steps:
      - name: 📢 Notify Success
        if: needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success'
        run: |
          echo "✅ Deployment completed successfully!"

      - name: 📢 Notify Failure
        if: needs.deploy-production.result == 'failure' || needs.deploy-staging.result == 'failure'
        run: |
          echo "❌ Deployment failed!"