name: Backend CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci-cd.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci-cd.yml'

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: hengtan/financeserver-backend

jobs:
  # ================================================================
  # CONTINUOUS INTEGRATION
  # ================================================================

  lint-and-format:
    name: 🔍 Code Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: 📥 Install Dependencies
        working-directory: backend
        run: npm ci

      - name: 🔍 Run ESLint
        working-directory: backend
        run: npm run lint

      - name: 📊 Upload Lint Results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: backend/eslint-report.json

  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: 🔒 Run Security Audit
        working-directory: backend
        run: npm audit --audit-level=moderate

      - name: 🔍 Check for Vulnerabilities
        working-directory: backend
        run: |
          npx audit-ci --moderate
        continue-on-error: true

  type-check:
    name: 📝 TypeScript Check
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: 📥 Install Dependencies
        working-directory: backend
        run: npm ci

      - name: 📝 Check TypeScript Types
        working-directory: backend
        run: npx tsc --noEmit

  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: ['18.x', '20.x']

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: 📥 Install Dependencies
        working-directory: backend
        run: npm ci

      - name: 🧪 Run Unit Tests
        working-directory: backend
        run: npm run test:coverage
        env:
          NODE_ENV: test

      - name: 📊 Upload Coverage to Codecov
        if: matrix.node-version == '18.x'
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

      - name: 📋 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.node-version }}
          path: |
            backend/coverage/
            backend/junit.xml

  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: financeserver_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: 📥 Install Dependencies
        working-directory: backend
        run: npm ci

      - name: 🗄️ Setup Database
        working-directory: backend
        run: |
          npx prisma generate
          npx prisma db push --force-reset
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/financeserver_test

      - name: 🔗 Run Integration Tests
        working-directory: backend
        run: npm run test -- --testPathPattern=integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/financeserver_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-secret
          JWT_REFRESH_SECRET: test-refresh-secret

  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check, unit-tests]

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: 📥 Install Dependencies
        working-directory: backend
        run: npm ci

      - name: 🏗️ Build Application
        working-directory: backend
        run: npm run build

      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            backend/dist/
            backend/package.json
            backend/package-lock.json
          retention-days: 7

  # ================================================================
  # CONTINUOUS DEPLOYMENT
  # ================================================================

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, integration-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: backend/

      - name: 🐳 Build Docker Image
        working-directory: backend
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging .

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🚀 Push Docker Image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging

      - name: 🌐 Deploy to Railway (Staging)
        uses: railwayapp/railway-deploy@v1.1.0
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: financeserver-backend-staging
        env:
          NODE_ENV: staging
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          REDIS_URL: ${{ secrets.STAGING_REDIS_URL }}
          JWT_SECRET: ${{ secrets.STAGING_JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.STAGING_JWT_REFRESH_SECRET }}

      - name: 🧪 Run Smoke Tests
        run: |
          curl -f ${{ secrets.STAGING_API_URL }}/health || exit 1
          echo "✅ Staging deployment successful!"

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: backend/

      - name: 🐳 Build Docker Image
        working-directory: backend
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest .
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🚀 Push Docker Images
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: 🗄️ Run Database Migrations
        working-directory: backend
        run: |
          npm ci
          npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: 🌐 Deploy to Railway (Production)
        uses: railwayapp/railway-deploy@v1.1.0
        with:
          railway_token: 986bcd46-d3f6-4814-99fe-6d7c848ae269
          service: financeserver-backend-prod
        env:
          NODE_ENV: production
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          REDIS_URL: ${{ secrets.PRODUCTION_REDIS_URL }}
          JWT_SECRET: ${{ secrets.PRODUCTION_JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.PRODUCTION_JWT_REFRESH_SECRET }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          NEWRELIC_LICENSE_KEY: ${{ secrets.NEWRELIC_LICENSE_KEY }}

      - name: 🧪 Run Smoke Tests
        run: |
          curl -f ${{ secrets.PRODUCTION_API_URL }}/health || exit 1
          curl -f ${{ secrets.PRODUCTION_API_URL }}/health/detailed || exit 1
          echo "✅ Production deployment successful!"

      - name: 📢 Notify Deployment Success
        if: success()
        run: |
          echo "🎉 Backend successfully deployed to production!"
          echo "📊 Version: ${{ github.sha }}"
          echo "🔗 URL: ${{ secrets.PRODUCTION_API_URL }}"

      - name: 📢 Notify Deployment Failure
        if: failure()
        run: |
          echo "❌ Production deployment failed!"
          echo "🔍 Check logs for details"

  # ================================================================
  # MONITORING & NOTIFICATIONS
  # ================================================================

  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ⚡ Run Load Tests
        run: |
          npx artillery quick --count 10 --num 5 ${{ secrets.STAGING_API_URL }}/health

      - name: 📊 Upload Performance Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: artillery-report.json

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔒 Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'backend/'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Security Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()

    steps:
      - name: 🧹 Clean up old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });

            // Keep only the last 5 artifacts
            const oldArtifacts = artifacts.data.artifacts.slice(5);

            for (const artifact of oldArtifacts) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
            }