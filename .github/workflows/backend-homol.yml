name: Backend CI/CD - Homologation

on:
  push:
    branches: [homol]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-homol.yml'
  pull_request:
    branches: [homol]
    paths:
      - 'backend/**'

env:
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./backend

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: financeserver_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install Node.js dependencies
        run: npm install

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run Prisma Migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/financeserver_test

      - name: Build TypeScript
        run: npm run build

      - name: Run Tests
        run: npm test --if-present
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/financeserver_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
          NODE_ENV: test

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  auto-promote-to-main:
    name: Auto-promote to Main (Production)
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/homol'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Pull Request to Main
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if PR already exists
          existing_pr=$(gh pr list --base main --head homol --state open --json number --jq '.[0].number' || echo "")

          if [ -z "$existing_pr" ]; then
            gh pr create \
              --base main \
              --head homol \
              --title "üöÄ Auto-promote Backend HOMOL ‚Üí MAIN (PRODUCTION)" \
              --body "## ‚úÖ Backend HOMOL passou em todos os testes!

          ### Testes executados:
          - ‚úÖ Build TypeScript
          - ‚úÖ Prisma Migrations
          - ‚úÖ Unit Tests
          - ‚úÖ Security Scan (npm audit)
          - ‚úÖ Snyk Security Analysis

          ### ‚ö†Ô∏è ATEN√á√ÉO - PRODU√á√ÉO
          Este PR ir√° para **PRODU√á√ÉO** quando aprovado!

          ### O que acontece ao aprovar:
          1. ‚úÖ Pipeline PROD rodar√° todos os testes novamente
          2. ‚úÖ Security scan stricto (audit-level=high)
          3. üöÄ Railway far√° deploy autom√°tico para produ√ß√£o
          4. üè∑Ô∏è Release tag ser√° criada automaticamente

          **Criado automaticamente pela pipeline CI/CD**"
            echo "‚úÖ PR created successfully!"
          else
            echo "‚ÑπÔ∏è PR #$existing_pr already exists"
          fi
